import streamlit as st
import requests
import pandas as pd
from io import StringIO

st.set_page_config(
    page_title="Pr√©diction du diagnostic de l‚Äôhaleine üìà",
    page_icon=":chart_with_upwards_trend:",
    layout="centered",
    initial_sidebar_state="collapsed",
)

st.title("Pr√©diction du diagnostic de l‚Äôhaleine üìà")

st.sidebar.header("T√©l√©chargez vos donn√©es de test")

uploaded_file = st.sidebar.file_uploader("Choisissez un fichier TXT", type="txt")

def extract_id_and_load_data(file_content):
    # Convertir le contenu du fichier en DataFrame
    df = pd.read_csv(StringIO(file_content), delimiter='\t', skiprows=1)

    # Lire la premi√®re ligne pour obtenir l'identifiant unique
    lines = file_content.split('\n')
    first_line = lines[0].strip()

    # V√©rifier si la premi√®re ligne contient un identifiant valide
    if first_line.startswith('ID:'):
        # Extraire l'identifiant apr√®s 'ID:'
        individual_id = first_line.split(':')[1].strip()
    else:
        # Si le format n'est pas correct, utiliser un identifiant par d√©faut
        individual_id = "Unknown_ID"
        st.warning(f"Avertissement : Aucun ID valide trouv√©. Utilisation de 'Unknown_ID'.")

    # Ajouter l'identifiant au DataFrame
    df['IndividualID'] = individual_id

    # Renommer les colonnes
    df.rename(columns={'IndividualID': 'ID'}, inplace=True)

    return df

if uploaded_file:
    st.write("Fichier TXT t√©l√©charg√© avec succ√®s.")

    # Lire le contenu du fichier TXT
    txt_content = uploaded_file.read().decode("utf-8")

    # Extraire les donn√©es du fichier
    try:
        test_df = extract_id_and_load_data(txt_content)

        # V√©rifiez les noms de colonnes disponibles
        st.write("Colonnes disponibles dans le fichier :")
        st.write(test_df.columns.tolist())

        # V√©rifier la pr√©sence de la colonne 'Min:Sec'
        if 'Min:Sec' not in test_df.columns:
            st.error("La colonne 'Min:Sec' est manquante dans le fichier.")
        else:
            # Afficher les premi√®res lignes du DataFrame pour v√©rification
            st.write("Aper√ßu des donn√©es du fichier t√©l√©charg√© :")
            st.write(test_df.head())

            # Convertir le DataFrame en CSV (en m√©moire)
            csv_buffer = StringIO()
            test_df.to_csv(csv_buffer, index=False)
            csv_buffer.seek(0)  # Revenir au d√©but du buffer

            # Envoyer le fichier CSV au backend pour pr√©diction
            if st.sidebar.button("Pr√©dire"):
                try:
                    response = requests.post(
                        "http://localhost:8000/predict",  # Corriger l'URL pour appeler le bon endpoint
                        files={"file": csv_buffer}
                    )

                    if response.status_code == 200:
                        result = response.json()
                        predictions = result.get("predictions", [])
                        if predictions:
                            st.write("R√©sultats de la pr√©diction :")
                            st.write(predictions)
                        else:
                            st.error("Aucune pr√©diction re√ßue du backend.")
                    else:
                        st.error(f"Erreur du backend : {response.status_code}, {response.text}")
                except Exception as e:
                    st.error(f"Erreur lors de l'envoi de la requ√™te : {str(e)}")
    except Exception as e:
        st.error(f"Erreur lors de la lecture du fichier : {str(e)}")
